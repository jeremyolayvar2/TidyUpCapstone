// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TidyUpCapstone.Data;

#nullable disable

namespace TidyUpCapstone.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250915120459_FixIdentityTablesAndColumns")]
    partial class FixIdentityTablesAndColumns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("app_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("app_role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("app_user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("app_user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("app_user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("app_user_tokens", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.AI.AiProcessingPipeline", b =>
                {
                    b.Property<int>("ProcessingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProcessingId"));

                    b.Property<int?>("AnalysisId")
                        .HasColumnType("int");

                    b.Property<string>("AzureCvStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ConfidenceLevel")
                        .HasColumnType("decimal(5,4)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinalCategory")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("FinalTokenValue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("PredictionId")
                        .HasColumnType("int");

                    b.Property<int>("RetryCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TensorflowStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ProcessingId");

                    b.HasIndex("AnalysisId");

                    b.HasIndex("ItemId");

                    b.HasIndex("PredictionId");

                    b.ToTable("ai_processing_pipeline", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.AI.AiTrainingFeedback", b =>
                {
                    b.Property<int>("AiFeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AiFeedbackId"));

                    b.Property<string>("AiPredictedCategory")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("AiPredictedPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("ConfidenceRating")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeedbackType")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("UserCorrectedCategory")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal?>("UserSetPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("AiFeedbackId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UserId");

                    b.ToTable("ai_training_feedback", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.AI.AzureCvAnalysis", b =>
                {
                    b.Property<int>("AnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnalysisId"));

                    b.Property<string>("ApiRequestId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ApiVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("ConfidenceScore")
                        .HasColumnType("decimal(5,4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DetectedCategories")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetectedObjects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessingTimeMs")
                        .HasColumnType("int");

                    b.HasKey("AnalysisId");

                    b.HasIndex("ItemId");

                    b.ToTable("azure_cv_analysis", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.AI.TensorflowPrediction", b =>
                {
                    b.Property<int>("PredictionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PredictionId"));

                    b.Property<decimal?>("ConditionScore")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DamageDetected")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("EstimatedTokenValue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("IsTrainingData")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModelVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PredictedCategory")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("PredictionConfidence")
                        .HasColumnType("decimal(5,4)");

                    b.Property<int?>("ProcessingTimeMs")
                        .HasColumnType("int");

                    b.HasKey("PredictionId");

                    b.HasIndex("ItemId");

                    b.ToTable("tensorflow_prediction", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Community.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCommented")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastEdited")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Community.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostType")
                        .HasColumnType("int");

                    b.HasKey("PostId");

                    b.HasIndex("AuthorId");

                    b.ToTable("posts", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Community.Reaction", b =>
                {
                    b.Property<int>("ReactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReactionId"));

                    b.Property<DateTime>("DateReacted")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("ReactionType")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReactionId");

                    b.HasIndex("UserId");

                    b.HasIndex("PostId", "UserId")
                        .IsUnique();

                    b.ToTable("reactions", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Core.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("AdminPermissions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AdminRole")
                        .HasColumnType("int");

                    b.Property<int>("AdminStatus")
                        .HasColumnType("int");

                    b.Property<bool>("CanManageSso")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastAdminLogin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastPasswordChange")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AdminId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("admin", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Core.EmailVerification", b =>
                {
                    b.Property<int>("VerificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VerificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RedirectUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("VerificationType")
                        .HasColumnType("int");

                    b.HasKey("VerificationId");

                    b.HasIndex("UserId");

                    b.ToTable("email_verifications", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Core.LoginLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("log_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<string>("Browser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("browser");

                    b.Property<string>("DeviceType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("device_type");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("failure_reason");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("ip_address");

                    b.Property<string>("LoginStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("login_status");

                    b.Property<DateTime>("LoginTimestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("login_timestamp");

                    b.Property<DateTime?>("LogoutTimestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("logout_timestamp");

                    b.Property<string>("OperatingSystem")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("os");

                    b.Property<string>("SessionId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("session_id");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("user_agent");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("LogId");

                    b.HasIndex("UserId");

                    b.ToTable("login_logs", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.Achievement", b =>
                {
                    b.Property<int>("AchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AchievementId"));

                    b.Property<string>("BadgeImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CriteriaType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CriteriaValue")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSecret")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.Property<decimal>("TokenReward")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("XpReward")
                        .HasColumnType("int");

                    b.HasKey("AchievementId");

                    b.ToTable("achievements", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.Leaderboard", b =>
                {
                    b.Property<int>("LeaderboardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeaderboardId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastReset")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxEntries")
                        .HasColumnType("int");

                    b.Property<string>("Metric")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("NextReset")
                        .HasColumnType("datetime2");

                    b.Property<int>("ResetFrequency")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LeaderboardId");

                    b.ToTable("leaderboards", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.LeaderboardEntry", b =>
                {
                    b.Property<int>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntryId"));

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeaderboardId")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousRank")
                        .HasColumnType("int");

                    b.Property<int>("RankChange")
                        .HasColumnType("int");

                    b.Property<int>("RankPosition")
                        .HasColumnType("int");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EntryId");

                    b.HasIndex("LeaderboardId");

                    b.HasIndex("UserId", "LeaderboardId")
                        .IsUnique();

                    b.ToTable("leaderboard_entries", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.Level", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LevelId"));

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LevelNumber")
                        .HasColumnType("int");

                    b.Property<string>("SpecialPrivilege")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TitleUnlock")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TokenBonus")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("XpRequired")
                        .HasColumnType("int");

                    b.Property<int>("XpToNext")
                        .HasColumnType("int");

                    b.HasKey("LevelId");

                    b.ToTable("levels", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.Quest", b =>
                {
                    b.Property<int>("QuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("QuestDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestObjective")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("QuestTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("QuestType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TargetValue")
                        .HasColumnType("int");

                    b.Property<decimal>("TokenReward")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("XpReward")
                        .HasColumnType("int");

                    b.HasKey("QuestId");

                    b.ToTable("quests", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.QuestProgress", b =>
                {
                    b.Property<int>("ProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgressId"));

                    b.Property<DateTime>("ActionTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GoalValue")
                        .HasColumnType("int");

                    b.Property<int>("ProgressValue")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserQuestId")
                        .HasColumnType("int");

                    b.HasKey("ProgressId");

                    b.HasIndex("UserQuestId");

                    b.ToTable("quest_progress", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.StreakType", b =>
                {
                    b.Property<int>("StreakTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StreakTypeId"));

                    b.Property<decimal>("BaseRewards")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MilestoneInterval")
                        .HasColumnType("int");

                    b.Property<decimal>("MilestoneRewards")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StreakUnit")
                        .HasColumnType("int");

                    b.HasKey("StreakTypeId");

                    b.ToTable("streak_types", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.UserAchievement", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("AchievementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EarnedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsNotified")
                        .HasColumnType("bit");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.HasKey("UserId", "AchievementId");

                    b.HasIndex("AchievementId");

                    b.ToTable("user_achievements", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.UserLevel", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentLevelId")
                        .HasColumnType("int");

                    b.Property<int>("CurrentXp")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LevelUpDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalLevelUps")
                        .HasColumnType("int");

                    b.Property<int>("TotalXp")
                        .HasColumnType("int");

                    b.Property<int>("XpToNextLevel")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("CurrentLevelId");

                    b.ToTable("user_levels", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.UserQuest", b =>
                {
                    b.Property<int>("UserQuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserQuestId"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentProgress")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateClaimed")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserQuestId");

                    b.HasIndex("QuestId");

                    b.HasIndex("UserId", "QuestId")
                        .IsUnique();

                    b.ToTable("userquests", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.UserStreak", b =>
                {
                    b.Property<int>("StreakId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StreakId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentStreak")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastMilestoneDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LongestStreak")
                        .HasColumnType("int");

                    b.Property<int>("StreakTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TotalMilestonesReached")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("StreakId");

                    b.HasIndex("StreakTypeId");

                    b.HasIndex("UserId", "StreakTypeId")
                        .IsUnique();

                    b.ToTable("user_streaks", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.UserVisualsPurchase", b =>
                {
                    b.Property<int>("UserVisualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserVisualId"));

                    b.Property<DateTime>("DatePurchased")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEquipped")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VisualId")
                        .HasColumnType("int");

                    b.HasKey("UserVisualId");

                    b.HasIndex("VisualId");

                    b.HasIndex("UserId", "VisualId")
                        .IsUnique();

                    b.ToTable("user_visuals_purchases", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.VisualItem", b =>
                {
                    b.Property<int>("VisualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisualId"));

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisualDescription")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VisualImgUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("VisualName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("VisualPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("VisualType")
                        .HasColumnType("int");

                    b.HasKey("VisualId");

                    b.ToTable("visual_items", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Items.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<decimal>("AdjustedTokenPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("AiConditionScore")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal?>("AiConfidenceLevel")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("AiDetectedCategory")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("AiProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("AiProcessingStatus")
                        .HasColumnType("int");

                    b.Property<decimal?>("AiSuggestedPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ConditionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FinalTokenPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ImageFileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ItemTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10,8)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(11,8)");

                    b.Property<bool>("PriceOverriddenByUser")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("LocationId");

                    b.HasIndex("CategoryId", "Status")
                        .HasDatabaseName("idx_item_category_status");

                    b.HasIndex("Latitude", "Longitude")
                        .HasDatabaseName("idx_item_coordinates");

                    b.HasIndex("UserId", "Status")
                        .HasDatabaseName("idx_item_user_status");

                    b.ToTable("items", null, t =>
                        {
                            t.HasCheckConstraint("chk_positive_prices", "[AdjustedTokenPrice] >= 0 AND [FinalTokenPrice] >= 0 AND ([AiSuggestedPrice] IS NULL OR [AiSuggestedPrice] >= 0)");

                            t.HasCheckConstraint("chk_valid_coordinates", "([Latitude] IS NULL AND [Longitude] IS NULL) OR ([Latitude] BETWEEN -90 AND 90 AND [Longitude] BETWEEN -180 AND 180)");
                        });
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Items.ItemCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int")
                        .HasColumnName("sort_order");

                    b.HasKey("CategoryId");

                    b.ToTable("item_category", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Items.ItemCondition", b =>
                {
                    b.Property<int>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("condition_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConditionId"));

                    b.Property<decimal>("ConditionMultiplier")
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("condition_multiplier");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("ConditionId");

                    b.ToTable("itemcondition", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Items.ItemLocation", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("region");

                    b.HasKey("LocationId");

                    b.ToTable("itemlocation", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Notifications.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedEntityType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId", "IsRead")
                        .HasDatabaseName("idx_notification_user_read");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Notifications.NotificationType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<string>("Color")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("color");

                    b.Property<bool>("DefaultEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("default_enabled");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("icon");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("type_name");

                    b.HasKey("TypeId");

                    b.ToTable("notification_types", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Notifications.UserNotificationPreference", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryMethod")
                        .HasColumnType("int");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "TypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("user_notification_preferences", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Reporting.AdminReport", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DownloadCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FileFormat")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<int>("GeneratedByAdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("GeneratedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsScheduled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastRunDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NextRunDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ReportParameters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportStatus")
                        .HasColumnType("int");

                    b.Property<int>("ReportType")
                        .HasColumnType("int");

                    b.Property<int?>("ReporterUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ScheduledFrequency")
                        .HasColumnType("int");

                    b.Property<int?>("TargetUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ReportId");

                    b.HasIndex("GeneratedByAdminId");

                    b.HasIndex("ReporterUserId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("admin_reports", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Reporting.UserReport", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<string>("AdminNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EvidenceUrls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Reason")
                        .HasColumnType("int");

                    b.Property<int>("ReportStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ReportedEntityId")
                        .HasColumnType("int");

                    b.Property<int>("ReportedEntityType")
                        .HasColumnType("int");

                    b.Property<int>("ReportedUserId")
                        .HasColumnType("int");

                    b.Property<int>("ReporterId")
                        .HasColumnType("int");

                    b.Property<int?>("ResolutionAction")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ResolvedByAdminId")
                        .HasColumnType("int");

                    b.HasKey("ReportId");

                    b.HasIndex("ReportedUserId");

                    b.HasIndex("ReporterId");

                    b.HasIndex("ResolvedByAdminId");

                    b.ToTable("user_reports", null, t =>
                        {
                            t.HasCheckConstraint("chk_no_self_report", "[ReporterId] != [ReportedUserId]");
                        });
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.SSO.SsoAuditLog", b =>
                {
                    b.Property<long>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AuditId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequestId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AuditId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("sso_audit_logs", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.SSO.SsoProvider", b =>
                {
                    b.Property<int>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProviderId"));

                    b.Property<string>("AuthorityUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ConfigurationJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Scopes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProviderId");

                    b.HasIndex("ProviderName")
                        .IsUnique()
                        .HasDatabaseName("idx_sso_provider_name");

                    b.ToTable("sso_providers", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.SSO.UserSsoLink", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LinkId"));

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LinkedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProviderAvatarUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProviderUserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scope")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("TokenExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LinkId");

                    b.HasIndex("ProviderName", "ProviderUserId")
                        .IsUnique()
                        .HasDatabaseName("idx_user_sso_links_provider");

                    b.HasIndex("UserId", "ProviderName")
                        .IsUnique();

                    b.ToTable("user_sso_links", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.System.AuditLog", b =>
                {
                    b.Property<long>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AuditId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AuditId");

                    b.HasIndex("AdminId");

                    b.HasIndex("UserId");

                    b.ToTable("audit_logs", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.System.SearchHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MaxPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("MinPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ResultsCount")
                        .HasColumnType("int");

                    b.Property<string>("SearchQuery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SearchedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("HistoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("search_history", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.System.SystemSetting", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SettingType")
                        .HasColumnType("int");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedByAdminId")
                        .HasColumnType("int");

                    b.HasKey("SettingId");

                    b.HasIndex("UpdatedByAdminId");

                    b.ToTable("system_settings", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.System.UserLocationPreference", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("AddressDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AutoDetectLocation")
                        .HasColumnType("bit");

                    b.Property<decimal?>("PreferredLat")
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal?>("PreferredLng")
                        .HasColumnType("decimal(11,8)");

                    b.Property<int>("RadiusKm")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("user_location_preferences", null, t =>
                        {
                            t.HasCheckConstraint("chk_valid_radius", "[RadiusKm] > 0 AND [RadiusKm] <= 1000");
                        });
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Transactions.Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatId"));

                    b.Property<bool>("BuyerConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateClaimed")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EscrowAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("EscrowReleased")
                        .HasColumnType("bit");

                    b.Property<int>("EscrowStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastMessageTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SellerConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("ChatId");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.ToTable("chats", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Transactions.ChatMessage", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("chat_messages", (string)null);
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Transactions.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryMethod")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<decimal>("TokenAmount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("TransactionStatus")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("ItemId");

                    b.HasIndex("BuyerId", "TransactionStatus")
                        .HasDatabaseName("idx_transaction_buyer_status");

                    b.HasIndex("SellerId", "TransactionStatus")
                        .HasDatabaseName("idx_transaction_seller_status");

                    b.ToTable("transactions", null, t =>
                        {
                            t.HasCheckConstraint("chk_buyer_not_seller", "[BuyerId] != [SellerId]");

                            t.HasCheckConstraint("chk_positive_token_amount", "[TokenAmount] > 0");
                        });
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.User.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("AccessFailedCount");

                    b.Property<string>("AdminNotes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("admin_notes");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_created");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_login");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("LockoutEnd");

                    b.Property<int?>("ManagedByAdminId")
                        .HasColumnType("int")
                        .HasColumnName("managed_by_admin_id");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("NormalizedEmail");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("NormalizedUserName");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SecurityStamp");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<decimal>("TokenBalance")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("token_balance");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("idx_user_email");

                    b.HasIndex("ManagedByAdminId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .HasDatabaseName("idx_user_username");

                    b.ToTable("app_user", null, t =>
                        {
                            t.HasCheckConstraint("chk_positive_token_balance", "token_balance >= 0");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.AI.AiProcessingPipeline", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.AI.AzureCvAnalysis", "Analysis")
                        .WithMany("ProcessingPipelines")
                        .HasForeignKey("AnalysisId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TidyUpCapstone.Models.Entities.Items.Item", "Item")
                        .WithMany("AiProcessingPipelines")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TidyUpCapstone.Models.Entities.AI.TensorflowPrediction", "Prediction")
                        .WithMany("ProcessingPipelines")
                        .HasForeignKey("PredictionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Analysis");

                    b.Navigation("Item");

                    b.Navigation("Prediction");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.AI.AiTrainingFeedback", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.Items.Item", "Item")
                        .WithMany("AiTrainingFeedbacks")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "User")
                        .WithMany("AiTrainingFeedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.AI.AzureCvAnalysis", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.Items.Item", "Item")
                        .WithMany("AzureCvAnalyses")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.AI.TensorflowPrediction", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.Items.Item", "Item")
                        .WithMany("TensorflowPredictions")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Community.Comment", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.Community.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TidyUpCapstone.Models.Entities.Community.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Community.Post", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Community.Reaction", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.Community.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "User")
                        .WithMany("Reactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Core.Admin", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "User")
                        .WithOne("Admin")
                        .HasForeignKey("TidyUpCapstone.Models.Entities.Core.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Core.EmailVerification", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "User")
                        .WithMany("EmailVerifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Core.LoginLog", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "User")
                        .WithMany("LoginLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.LeaderboardEntry", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.Gamification.Leaderboard", "Leaderboard")
                        .WithMany("Entries")
                        .HasForeignKey("LeaderboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leaderboard");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.QuestProgress", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.Gamification.UserQuest", "UserQuest")
                        .WithMany("QuestProgresses")
                        .HasForeignKey("UserQuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserQuest");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.UserAchievement", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.Gamification.Achievement", "Achievement")
                        .WithMany("UserAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "User")
                        .WithMany("UserAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.UserLevel", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.Gamification.Level", "CurrentLevel")
                        .WithMany("UserLevels")
                        .HasForeignKey("CurrentLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "User")
                        .WithOne("UserLevel")
                        .HasForeignKey("TidyUpCapstone.Models.Entities.Gamification.UserLevel", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentLevel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.UserQuest", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.Gamification.Quest", "Quest")
                        .WithMany("UserQuests")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "User")
                        .WithMany("UserQuests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.UserStreak", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.Gamification.StreakType", "StreakType")
                        .WithMany("UserStreaks")
                        .HasForeignKey("StreakTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "User")
                        .WithMany("UserStreaks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StreakType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.UserVisualsPurchase", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "User")
                        .WithMany("UserVisualsPurchases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TidyUpCapstone.Models.Entities.Gamification.VisualItem", "VisualItem")
                        .WithMany("UserPurchases")
                        .HasForeignKey("VisualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VisualItem");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Items.Item", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.Items.ItemCategory", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TidyUpCapstone.Models.Entities.Items.ItemCondition", "Condition")
                        .WithMany("Items")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TidyUpCapstone.Models.Entities.Items.ItemLocation", "Location")
                        .WithMany("Items")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "User")
                        .WithMany("Items")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Condition");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Notifications.Notification", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.Notifications.NotificationType", "Type")
                        .WithMany("Notifications")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Notifications.UserNotificationPreference", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.Notifications.NotificationType", "Type")
                        .WithMany("UserPreferences")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Reporting.AdminReport", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.Core.Admin", "GeneratedByAdmin")
                        .WithMany("GeneratedReports")
                        .HasForeignKey("GeneratedByAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "ReporterUser")
                        .WithMany()
                        .HasForeignKey("ReporterUserId");

                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "TargetUser")
                        .WithMany()
                        .HasForeignKey("TargetUserId");

                    b.Navigation("GeneratedByAdmin");

                    b.Navigation("ReporterUser");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Reporting.UserReport", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "ReportedUser")
                        .WithMany("ReportsReceived")
                        .HasForeignKey("ReportedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "Reporter")
                        .WithMany("ReportsMade")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TidyUpCapstone.Models.Entities.Core.Admin", "ResolvedByAdmin")
                        .WithMany("ResolvedReports")
                        .HasForeignKey("ResolvedByAdminId");

                    b.Navigation("ReportedUser");

                    b.Navigation("Reporter");

                    b.Navigation("ResolvedByAdmin");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.SSO.SsoAuditLog", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.SSO.SsoProvider", "Provider")
                        .WithMany("SsoAuditLogs")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Provider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.SSO.UserSsoLink", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.SSO.SsoProvider", "Provider")
                        .WithMany("UserSsoLinks")
                        .HasForeignKey("ProviderName")
                        .HasPrincipalKey("ProviderName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "User")
                        .WithMany("SsoHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.System.AuditLog", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.Core.Admin", "Admin")
                        .WithMany("AdminAuditLogs")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Admin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.System.SearchHistory", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.Items.ItemCategory", "Category")
                        .WithMany("SearchHistories")
                        .HasForeignKey("CategoryId");

                    b.HasOne("TidyUpCapstone.Models.Entities.Items.ItemLocation", "Location")
                        .WithMany("SearchHistories")
                        .HasForeignKey("LocationId");

                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.System.SystemSetting", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.Core.Admin", "UpdatedByAdmin")
                        .WithMany("SystemSettingsUpdated")
                        .HasForeignKey("UpdatedByAdminId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("UpdatedByAdmin");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.System.UserLocationPreference", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "User")
                        .WithOne("LocationPreference")
                        .HasForeignKey("TidyUpCapstone.Models.Entities.System.UserLocationPreference", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Transactions.Chat", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.Transactions.Transaction", "Transaction")
                        .WithOne("Chat")
                        .HasForeignKey("TidyUpCapstone.Models.Entities.Transactions.Chat", "TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Transactions.ChatMessage", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.Transactions.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "Sender")
                        .WithMany("ChatMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Transactions.Transaction", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "Buyer")
                        .WithMany("BuyerTransactions")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TidyUpCapstone.Models.Entities.Items.Item", "Item")
                        .WithMany("Transactions")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "Seller")
                        .WithMany("SellerTransactions")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Item");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.User.AppUser", b =>
                {
                    b.HasOne("TidyUpCapstone.Models.Entities.User.AppUser", "ManagedByAdmin")
                        .WithMany("ManagedUsers")
                        .HasForeignKey("ManagedByAdminId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ManagedByAdmin");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.AI.AzureCvAnalysis", b =>
                {
                    b.Navigation("ProcessingPipelines");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.AI.TensorflowPrediction", b =>
                {
                    b.Navigation("ProcessingPipelines");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Community.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Community.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Core.Admin", b =>
                {
                    b.Navigation("AdminAuditLogs");

                    b.Navigation("GeneratedReports");

                    b.Navigation("ResolvedReports");

                    b.Navigation("SystemSettingsUpdated");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.Achievement", b =>
                {
                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.Leaderboard", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.Level", b =>
                {
                    b.Navigation("UserLevels");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.Quest", b =>
                {
                    b.Navigation("UserQuests");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.StreakType", b =>
                {
                    b.Navigation("UserStreaks");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.UserQuest", b =>
                {
                    b.Navigation("QuestProgresses");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Gamification.VisualItem", b =>
                {
                    b.Navigation("UserPurchases");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Items.Item", b =>
                {
                    b.Navigation("AiProcessingPipelines");

                    b.Navigation("AiTrainingFeedbacks");

                    b.Navigation("AzureCvAnalyses");

                    b.Navigation("TensorflowPredictions");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Items.ItemCategory", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("SearchHistories");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Items.ItemCondition", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Items.ItemLocation", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("SearchHistories");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Notifications.NotificationType", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("UserPreferences");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.SSO.SsoProvider", b =>
                {
                    b.Navigation("SsoAuditLogs");

                    b.Navigation("UserSsoLinks");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Transactions.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.Transactions.Transaction", b =>
                {
                    b.Navigation("Chat");
                });

            modelBuilder.Entity("TidyUpCapstone.Models.Entities.User.AppUser", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("AiTrainingFeedbacks");

                    b.Navigation("BuyerTransactions");

                    b.Navigation("ChatMessages");

                    b.Navigation("Comments");

                    b.Navigation("EmailVerifications");

                    b.Navigation("Items");

                    b.Navigation("LocationPreference");

                    b.Navigation("LoginLogs");

                    b.Navigation("ManagedUsers");

                    b.Navigation("Notifications");

                    b.Navigation("Posts");

                    b.Navigation("Reactions");

                    b.Navigation("ReportsMade");

                    b.Navigation("ReportsReceived");

                    b.Navigation("SellerTransactions");

                    b.Navigation("SsoHistory");

                    b.Navigation("UserAchievements");

                    b.Navigation("UserLevel");

                    b.Navigation("UserQuests");

                    b.Navigation("UserStreaks");

                    b.Navigation("UserVisualsPurchases");
                });
#pragma warning restore 612, 618
        }
    }
}
