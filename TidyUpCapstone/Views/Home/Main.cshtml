@model TidyUpCapstone.Models.ViewModels.Items.ItemListViewModel
@using TidyUpCapstone.Helpers

<link href="https://cdn.jsdelivr.net/npm/iconsax@1.0.0-alpha2/dist/css/iconsax.css" rel="stylesheet">
<link rel="stylesheet" href="~/css/instagram-animations.css" />
<link rel="stylesheet" href="~/css/posting-styles.css" />

@{
    ViewBag.HideNavigation = false;
    string currentUserId = "";
    string currentUserName = "";

    if (User.Identity.IsAuthenticated)
    {
        // Real authenticated user
        currentUserId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "";
        currentUserName = User.Identity.Name ?? "";
    }
    else
    {
        // For production - redirect to login or handle unauthenticated users
        currentUserId = "";
        currentUserName = "Anonymous";
    }
}

<script>
    window.currentUserId = '@currentUserId';
    window.currentUserName = '@currentUserName';

    function getCurrentUserId() {
        return window.currentUserId || document.body.dataset.userid || null;
    }

    function getCurrentUserName() {
        return window.currentUserName || document.body.dataset.username || "Anonymous";
    }
</script>

<form id="antiForgeryForm" style="display:none;">
    @Html.AntiForgeryToken()
</form>

<!-- FIXED: Proper Container Structure -->
<div class="page-container">
    <!-- Filter Tabs -->
    <div class="filter-tabs-container">
        <div class="filter-tabs">
            <button class="filter-tab active" data-filter="all">
                <i class='bx bx-apps-alt'></i>
                <span class="filter-tab-text">All Posts</span>
            </button>
            <button class="filter-tab" data-filter="items">
                <i class='bx bx-shopping-bag'></i>
                <span class="filter-tab-text">Items</span>
            </button>
            <button class="filter-tab" data-filter="community">
                <i class='bx bx-community'></i>
                <span class="filter-tab-text">Community</span>
            </button>
        </div>
    </div>

    <!-- Community Post Creation Section -->
    @if (User.Identity.IsAuthenticated)
    {
        <div class="community-post-section" id="communityPostSection">
            <div class="post-creator">
                <div class="post-creator-header">
                    <div class="user-avatar">
                        <img src="@(ViewBag.CurrentUserAvatar ?? "~/assets/default-avatar.svg")" alt="Your avatar" />
                    </div>
                    <div class="post-input-container">
                        <textarea class="post-input"
                              placeholder="Share your clutter story..."
                              id="communityPostInput"
                              maxlength="1000"
                              rows="1"></textarea>
                        <div class="post-actions">
                            <div class="post-options">
                                <button type="button" class="post-option-btn" id="addImageBtn">
                                    <i class='bx bx-image'></i>
                                    <span>Photo</span>
                                </button>
                                <input type="file" id="communityImageInput" accept="image/*" style="display: none;">
                            </div>
                            <button type="button" class="post-btn-community" id="postCommunityBtn" disabled>
                                Post
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Image Preview -->
                <div class="community-image-preview" id="communityImagePreview" style="display: none;">
                    <img id="communityPreviewImg" src="" alt="Preview" />
                    <button type="button" class="remove-community-image" id="removeCommunityImage">
                        <i class='bx bx-x'></i>
                    </button>
                </div>
            </div>
        </div>
    }

    <!-- POST CONTAINER -->
    <div class="main-container-main">
        @if (User.Identity.IsAuthenticated)
        {
            <button class="floating-add-btn" id="openCreateModal" title="Post an Item">
                <i class='bx bx-plus'></i>
            </button>
        }

        <div class="posts-container" id="postsContainer">
            <!-- Regular Item Posts -->
            @if (Model?.Items != null && Model.Items.Any())
            {
                @foreach (var item in Model.Items)
                {
                    <div class="item-post" data-type="item" id="item-@item.ItemId">
                        <div class="mid-container-child">
                            <div class="listing-container1">
                                <div class="listing-container1-child1">
                                    <img src="@item.UserAvatarUrl" alt="person" />
                                    <span>@item.Username</span>
                                    <img src="~/assets/verified-icon.svg" alt="verified" />
                                    <span class="date-span">@item.DatePosted.ToTimeAgo()</span>
                                </div>

                                @{
                                    bool isItemOwner = false;
                                    if (User.Identity.IsAuthenticated)
                                    {
                                        isItemOwner = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value == item.UserId.ToString();
                                    }
                                }

                                <!-- Enhanced Dropdown -->
                                <div class="dropdown-menu">
                                    <button class="dropdown-btn" onclick="toggleDropdown(this)" aria-label="Post options">
                                        <i class='bx bx-dots-horizontal-rounded'></i>
                                    </button>
                                    <div class="dropdown-content">
                                        @if (isItemOwner)
                                        {
                                            <button class="dropdown-item" onclick="openEditModal(@item.ItemId)">
                                                <i class='bx bx-edit'></i>
                                                <span>Edit</span>
                                            </button>
                                            <button class="dropdown-item delete" onclick="deleteItem(@item.ItemId)">
                                                <i class='bx bx-trash'></i>
                                                <span>Delete</span>
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="dropdown-item report" onclick="reportItem(@item.ItemId)">
                                                <i class='bx bx-flag'></i>
                                                <span>Report</span>
                                            </button>
                                        }
                                    </div>
                                </div>
                            </div>

                            <div class="listing-container2">
                                @if (!string.IsNullOrEmpty(item.ImageFileName))
                                {
                                    <img src="@item.ImageUrl" alt="@item.ItemTitle" />
                                }
                                else
                                {
                                    <div class="no-image-placeholder">No Image Available</div>
                                }
                            </div>

                            <div class="listing-container3">
                                <div class="listing-container3-child1">
                                    <i class='bx bx-category'></i>
                                    <span>@item.CategoryName</span>
                                </div>

                                <div class="listing-container3-child2">
                                    <i class='bx bx-info-circle'></i>
                                    <span>@item.ConditionName</span>
                                </div>

                                <div class="listing-container3-child3">
                                    <i class='bx bx-map'></i>
                                    <span>@item.LocationName</span>
                                </div>
                            </div>

                            <div class="listing-container4">
                                <h3>@item.ItemTitle</h3>
                                <p>@item.Description</p>
                            </div>

                            <div class="listing-container5">
                                <div class="listing-container5-child1">
                                    <span>
                                        @{
                                            string currentUserIdForPrice = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

                                            if (string.IsNullOrEmpty(currentUserIdForPrice) || !User.Identity.IsAuthenticated)
                                            {
                                                @item.AdjustedTokenPrice.ToString("0.##")
                                            }
                                            else if (currentUserIdForPrice == item.UserId.ToString())
                                            {
                                                @item.FinalTokenPrice.ToString("0.##")
                                            }
                                            else
                                            {
                                                @item.AdjustedTokenPrice.ToString("0.##")
                                            }
                                        }
                                    </span>
                                    <img src="~/assets/game-icons_token.svg" alt="token" />
                                </div>

                                @if (item.Status != TidyUpCapstone.Models.Entities.Items.ItemStatus.Available)
                                {
                                    <div class="status-badge @item.StatusDisplayName.ToLower()">
                                        @item.StatusDisplayName
                                    </div>
                                }
                                else if (item.IsExpired)
                                {
                                    <div class="status-badge expired">
                                        Expired
                                    </div>
                                }
                                else if (User.Identity.IsAuthenticated)
                                {
                                    <button class="interested-btn" onclick="createChatBubble('@item.UserId', '@item.Username', @item.ItemId, '@item.ItemTitle')">
                                        <span>Interested</span>
                                    </button>
                                }

                                @if (item.IsAiProcessed && item.AiConfidenceLevel.HasValue)
                                {
                                    <div class="ai-confidence" title="AI Confidence Level">
                                        <i class='bx bx-bot'></i>
                                        <span>@((item.AiConfidenceLevel.Value * 100).ToString("0"))%</span>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>

        <!-- Empty State -->
        <div class="empty-state-container" id="emptyState" style="display: none;">
            <div class="empty-state">
                <img src="~/assets/empty-items.svg" alt="No items" class="empty-state-icon" />
                <h3>No posts found</h3>
                <p>Be the first to post in this community!</p>
                @if (User.Identity.IsAuthenticated)
                {
                    <button class="btn btn-primary" onclick="openCreateModal()">Post Your First Item</button>
                }
                else
                {
                    <p><a href="/Account/Login">Login</a> to start posting items!</p>
                }
            </div>
        </div>
    </div>
</div>

<!-- CHAT -->
@if (User.Identity.IsAuthenticated)
{
    <button class="new-message-btn" id="newMessageBtn" aria-label="New Message" title="New Message">
        <i class='bx bx-message-detail'></i>
        <span>Messages</span>
    </button>

    <div class="messaging-overlay">
        <!-- App Container (Messages Panel) -->
        <div class="app-container" role="application" aria-label="Messages Panel">
            <header>
                <h1>Messages</h1>
                <div class="header-controls">
                    <button class="icon-btn" id="expandBtn" title="Expand">
                        <i class='bx bx-expand'></i>
                    </button>
                    <button class="icon-btn" id="closeAppBtn" title="Close">
                        <i class='bx bx-x'></i>
                    </button>
                </div>
            </header>
            <main>
                <div class="messages-list" tabindex="0" aria-label="Messages list" role="list">
                </div>
            </main>
        </div>

        <div class="chat-window">
            <div class="header-chat">
                <div class="header-chat-child1">
                    <h2>Item Owner</h2>
                    <p>Active 24m ago</p>
                </div>
                <button class="icon-btn" id="closeChatBtn" title="Back to Messages">
                    <i class='bx bx-arrow-back'></i>
                </button>
            </div>
            <div class="message-log">
                @* Messages will be loaded dynamically *@
            </div>

            <div class="message-input">
                <input type="text" id="chatMessageInput" placeholder="Message..." />
                <button type="button" id="sendMessage" class="send-btn" aria-label="Send message">
                    <i class='bx bx-send'></i>
                </button>
            </div>
        </div>
    </div>
}

<!-- Token wallet modal -->
@if (User.Identity.IsAuthenticated)
{
    <div class="card-spotlight" id="tokenModal">
        <div class="card-spotlight-child1">
            <h2>@(ViewBag.CurrentUserTokenBalance ?? 0)</h2>
            <img src="~/assets/token-symbol.svg" alt="Token" />
        </div>
        <div class="card-spotlight-child2">
            <p>This is your current token balance</p>
        </div>
    </div>
}

<!-- FIXED: Modal for Posting an Item -->
@if (User.Identity.IsAuthenticated)
{
    <div id="createPostModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Post an Item</h2>
                <button type="button" class="close-modal" onclick="closeCreateModal()">
                    <i class='bx bx-x'></i>
                </button>
            </div>

            <div class="modal-content-child1">
                <div class="upload-section">
                    <label for="imageInput" class="upload-label">
                        <img src="~/assets/upload-image-input.svg" alt="Upload" class="upload-image-btn">
                        <span class="upload-text">Click to upload image</span>
                    </label>
                    <input type="file" id="imageInput" name="ImageFile" accept="image/*" required>

                    <!-- Image Preview Container -->
                    <div class="image-preview" id="imagePreview" style="display: none;">
                        <img id="previewImg" src="" alt="Preview" />
                        <button type="button" class="remove-image" onclick="removeImage()">
                            <i class='bx bx-x'></i>
                        </button>
                    </div>
                </div>

                <div class="cat-con-price">
                    <!-- Category Dropdown -->
                    <div id="categoryContainer">
                        <select id="categoryInput" name="CategoryId" required>
                            <option value="" disabled selected hidden>Select a category</option>
                            @foreach (var category in Model?.Categories ?? new List<TidyUpCapstone.Models.DTOs.Items.ItemCategoryDto>())
                            {
                                <option value="@category.CategoryId">@category.Name</option>
                            }
                        </select>
                    </div>

                    <!-- Condition Dropdown -->
                    <div id="conditionContainer">
                        <select id="conditionInput" name="ConditionId" required>
                            <option value="" disabled selected hidden>Select condition</option>
                            @foreach (var condition in Model?.Conditions ?? new List<TidyUpCapstone.Models.DTOs.Items.ItemConditionDto>())
                            {
                                <option value="@condition.ConditionId">@condition.Name</option>
                            }
                        </select>
                    </div>

                    <div class="input-wrapper">
                        <input class="input-form" type="text" id="locationInput" name="LocationName" placeholder=" " required />
                        <label class="input-label" for="locationInput">Location</label>
                    </div>
                </div>
            </div>

            <div class="modal-content-child2">
                <div class="item-info">
                    <!-- Title -->
                    <div class="input-wrapper">
                        <input class="input-form" type="text" id="titleInput" name="ItemTitle" placeholder=" " required maxlength="100" />
                        <label class="input-label" for="titleInput">Item Title</label>
                    </div>

                    <!-- Description -->
                    <div class="input-wrapper">
                        <textarea class="input-form" id="descriptionInput" name="Description" placeholder=" " required maxlength="1000"></textarea>
                        <label class="input-label" for="descriptionInput">Description</label>
                    </div>

                    <!-- Hidden fields for location data -->
                    <input type="hidden" id="LocationName" name="LocationName" />
                    <input type="hidden" name="Latitude" id="Latitude" />
                    <input type="hidden" name="Longitude" id="Longitude" />

                    <!-- Hidden fields for AI data -->
                    <input type="hidden" id="aiCategoryId" name="AiCategoryId" />
                    <input type="hidden" id="aiConditionId" name="AiConditionId" />
                    <input type="hidden" id="aiConfidenceScore" name="AiConfidenceScore" />
                </div>

                <div class="token-post">
                    <div class="price-display">
                        <span class="token-count" id="finalPrice">0.00</span>
                        <img src="~/assets/game-icons_token.svg" alt="token" />
                        <div class="price-breakdown" id="priceBreakdown" style="display: none;">
                            <small id="priceDetails"></small>
                        </div>
                    </div>
                    <button type="submit" class="post-btn" id="submitPost" disabled>
                        <span class="loading-spinner" style="display: none;"></span>
                        <span class="btn-text">Post</span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Modal -->
    <div id="editPostModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Edit Item</h2>
                <button type="button" class="close-modal" onclick="closeEditModal()">
                    <i class='bx bx-x'></i>
                </button>
            </div>

            <div class="modal-content-child1">
                <!-- Current image display -->
                <div class="current-image-display" id="currentImageContainer">
                    <img id="currentImageDisplay" src="" alt="Current image" style="width: 100%; max-width: 300px; border-radius: 8px;" />
                </div>

                <div class="cat-con-price">
                    <!-- READ-ONLY Category Display -->
                    <div id="editCategoryContainer">
                        <label>Category</label>
                        <div class="read-only-field" id="editCategoryDisplay">
                            <!-- Will be populated by JavaScript -->
                        </div>
                        <input type="hidden" id="editCategoryInput" name="CategoryId" />
                    </div>

                    <!-- READ-ONLY Condition Display -->
                    <div id="editConditionContainer">
                        <label>Condition</label>
                        <div class="read-only-field" id="editConditionDisplay">
                            <!-- Will be populated by JavaScript -->
                        </div>
                        <input type="hidden" id="editConditionInput" name="ConditionId" />
                    </div>

                    <!-- EDITABLE Location -->
                    <div class="input-wrapper">
                        <input class="input-form" type="text" id="editLocationInput" name="LocationName" placeholder=" " required />
                        <label class="input-label" for="editLocationInput">Location</label>
                    </div>
                </div>
            </div>

            <div class="modal-content-child2">
                <div class="item-info">
                    <!-- EDITABLE Title -->
                    <div class="input-wrapper">
                        <input class="input-form" type="text" id="editTitleInput" name="ItemTitle" placeholder=" " required maxlength="100" />
                        <label class="input-label" for="editTitleInput">Item Title</label>
                    </div>

                    <!-- EDITABLE Description -->
                    <div class="input-wrapper">
                        <textarea class="input-form" id="editDescriptionInput" name="Description" placeholder=" " required maxlength="1000"></textarea>
                        <label class="input-label" for="editDescriptionInput">Description</label>
                    </div>

                    <!-- Hidden fields -->
                    <input type="hidden" id="editLatitude" name="Latitude" />
                    <input type="hidden" id="editLongitude" name="Longitude" />
                </div>

                <div class="token-post">
                    <div class="price-display">
                        <span class="token-count" id="editFinalPrice">0.00</span>
                        <img src="~/assets/game-icons_token.svg" alt="token" />
                    </div>
                    <button class="post-btn" id="submitEdit" type="button">
                        <span class="loading-spinner" style="display: none;"></span>
                        <span class="btn-text">Save Changes</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Scripts -->
<script src="~/js/sidebar-toggle.js"></script>
<script src="~/js/toggleEditDelete.js"></script>
<script src="~/js/afterTax.js"></script>
<script src="~/js/openModal.js?v=1.0.14"></script>
<script src="~/js/editingPost.js?v=1.0.19"></script>
<script src="~/js/deletePost.js"></script>
<script src="~/js/tokenModal.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="~/js/messageScript.js"></script>
<script src="~/js/createChatBubble.js"></script>

<!-- Enhanced posting system scripts -->
<script src="~/js/uiUpdateSystem.js"></script>
<script src="~/js/filterTabSystem.js"></script>

<!-- SignalR -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script src="~/js/SignalRConnection.js"></script>

<!-- Community Page Scripts -->
<script src="~/js/CommunityPage.js?v=20241114g"></script>

<!-- Google Places API Configuration -->
<script>
    // Only load Google Maps API if user is authenticated
    if (@(User.Identity.IsAuthenticated.ToString().ToLower())) {
        function loadGoogleMapsAPI() {
            console.log('Loading Google Maps API...');

            const API_KEY = 'AIzaSyAajNvSCpxo_QwyPwsRmrmr2-MlApf6Qkw';

            const script = document.createElement('script');
            script.src = `https://maps.googleapis.com/maps/api/js?key=${API_KEY}&libraries=places&callback=initializeGooglePlaces&loading=async`;
            script.async = true;
            script.defer = true;

            script.onerror = function(error) {
                console.error('Failed to load Google Maps API:', error);
                initializeManualLocationFallback();
            };

            document.head.appendChild(script);
        }

        window.initializeGooglePlaces = function() {
            console.log('Google Places API callback triggered');

            if (typeof google === 'undefined' || !google.maps || !google.maps.places) {
                console.error('Google Maps/Places API not properly initialized');
                initializeManualLocationFallback();
                return;
            }

            initializeAutocomplete();
        };

        function initializeAutocomplete() {
            const locationInput = document.getElementById('locationInput');
            const editLocationInput = document.getElementById('editLocationInput');

            if (!locationInput) {
                console.error('Location input not found');
                return;
            }

            try {
                const autocomplete = new google.maps.places.Autocomplete(locationInput, {
                    types: ['geocode'],
                    componentRestrictions: { country: 'ph' },
                    fields: ['formatted_address', 'geometry', 'place_id']
                });

                autocomplete.addListener('place_changed', function() {
                    const place = autocomplete.getPlace();

                    if (!place.geometry) {
                        console.log('No geometry for selected place');
                        return;
                    }

                    const lat = place.geometry.location.lat();
                    const lng = place.geometry.location.lng();

                    document.getElementById('Latitude').value = lat;
                    document.getElementById('Longitude').value = lng;
                    document.getElementById('LocationName').value = place.formatted_address;

                    console.log('Location selected:', { lat, lng, address: place.formatted_address });

                    if (typeof triggerFormValidation === 'function') {
                        triggerFormValidation();
                    }
                });

                if (editLocationInput) {
                    const editAutocomplete = new google.maps.places.Autocomplete(editLocationInput, {
                        types: ['geocode'],
                        componentRestrictions: { country: 'ph' },
                        fields: ['formatted_address', 'geometry', 'place_id']
                    });

                    editAutocomplete.addListener('place_changed', function() {
                        const place = editAutocomplete.getPlace();
                        if (place.geometry) {
                            document.getElementById('editLatitude').value = place.geometry.location.lat();
                            document.getElementById('editLongitude').value = place.geometry.location.lng();
                        }
                    });
                }

                console.log('Autocomplete initialized successfully');

            } catch (error) {
                console.error('Error initializing autocomplete:', error);
                initializeManualLocationFallback();
            }
        }

        function initializeManualLocationFallback() {
            console.log('Initializing manual location entry fallback');

            const locationInput = document.getElementById('locationInput');
            if (locationInput) {
                locationInput.placeholder = 'Enter location manually (e.g., Manila, Philippines)';

                locationInput.addEventListener('blur', function() {
                    const location = this.value.trim();
                    if (location && location.length > 3) {
                        document.getElementById('Latitude').value = '14.5995';
                        document.getElementById('Longitude').value = '120.9842';
                        document.getElementById('LocationName').value = location;

                        console.log('Manual location set:', location);

                        if (typeof triggerFormValidation === 'function') {
                            triggerFormValidation();
                        }
                    }
                });
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(() => {
                if (typeof google !== 'undefined' && google.maps && google.maps.places) {
                    console.log('Google API already loaded');
                    initializeAutocomplete();
                } else {
                    loadGoogleMapsAPI();
                }
            }, 500);
        });
    }
</script>